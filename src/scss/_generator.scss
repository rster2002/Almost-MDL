@use "sass:math";

@function hex-to-rgb-map($hex) {
    @return (
        "r": red($hex),
        "g": green($hex),
        "b": blue($hex)
    )
}

@function linear-component($rgb-component) {
    @debug "rgb:" $rgb-component;
    $normalized: math.div($rgb-component, 255);
    @debug "Normalized:" $normalized;

    @if $normalized < 0.040449936 {
        @return math.div($normalized, 12.92) * 100;
    } @else {
        @return 100 * math.pow(math.div($normalized + 0.055, 1.055), 2.4);
    }
}

@function sign-number($number) {
    @if $number <= 0 {
        @return -1;
    } @else if($number == 0) {
        @return 0;
    } @else {
        @return 1;
    }
}

@function atan-to-hue($atan) {
    @if $atan <= 0 {
        @return $atan + 360;
    } @else if($atan > 360) {
        @return $atan - 360;
    } @else {
        @return $atan;
    }
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return math.div($number, $number * 0 + 1);
    }

    @return $number;
}

@function rgb-map-to-hct($rgb-map) {
    $rL: linear-component(map-get($rgb-map, "r"));
    $gL: linear-component(map-get($rgb-map, "g"));
    $bL: linear-component(map-get($rgb-map, "b"));
    $x: 0.41233895 * $rL + 0.35762064 * $gL + 0.18051042 * $bL;
    $y: 0.2126 * $rL + 0.7152 * $gL * 0.0722 * $bL;
    $z: 0.01932141 * $rL + 0.11916382 * $gL + 0.95034478 * $bL;
    $rD: 1.02117770275752 * (0.401288 * $x + 0.650173 * $y - 0.051461 * $z);
    $gD: 0.9863077294280124 * (-0.250268 * $x + 1.204414 * $y + 0.045854 * $z);
    $bD: 0.9339605082802299 * (-0.002079 * $x + 0.048952 * $y + 0.953127 * $z);
    $rAF: math.pow(math.div(0.3884814537800353 * math.abs($rD), 100), 0.42);
    $gAF: math.pow(math.div(0.3884814537800353 * math.abs($gD), 100), 0.42);
    $bAF: math.pow(math.div(0.3884814537800353 * math.abs($bD), 100), 0.42);
    $rA: math.div(400 * sign-number($rD) * $rAF, $rAF + 27.13);
    $gA: math.div(400 * sign-number($gD) * $gAF, $gAF + 27.13);
    $bA: math.div(400 * sign-number($bD) * $bAF, $bAF + 27.13);
    $a: math.div(11 * $rA + -12 * $gA + $bA, 11);
    $b: math.div($rA + $gA - 2 * $bA, 9);
    $atanDegrees: strip-unit(math.atan2($b, $a));
    $hue: atan-to-hue($atanDegrees);

    @return $hue;

    //@debug "$rL:" $rL;
    //@debug "$gL:" $gL;
    //@debug "$bL:" $bL;
    //@debug "$x:" $x;
    //@debug "$y:" $y;
    //@debug "$z:" $z;
    //@debug "$rD:" $rD;
    //@debug "$gD:" $gD;
    //@debug "$bD:" $bD;
    //@debug "$rAF:" $rAF;
    //@debug "$gAF:" $gAF;
    //@debug "$bAF:" $bAF;
    //@debug "$rA:" $rA;
    //@debug "$gA:" $gA;
    //@debug "$bA:" $bA;
    //@debug "$a:" $a;
    //@debug "$b:" $b;
    //@debug "$atanDegrees:" $atanDegrees;
    //@debug "$hue:" $hue;

    @return $atanDegrees;
}

@mixin generator($primary-color) {
    $primary-rgb-map: hex-to-rgb-map($primary-color);

    --rgb: map-get($primary-rgb-map, "r");

    --hi: #{rgb-map-to-hct($primary-rgb-map)};
}
